{"version":3,"sources":["../../app-es6/services/ConnectionFactory.js"],"names":["ConnectionFactory","stores","version","database","connection","close","Error","Promise","resolve","reject","openRequest","window","indexedDB","open","onupgradeneeded","_createStores","e","target","result","onsuccess","bind","onerror","console","log","error","name","forEach","objectStoreNames","contains","store","deleteObjectStore","createObjectStore","autoIncrement"],"mappings":";;;;AAAA,IAAIA,oBAAqB,YAAY;AACjC,QAAMC,SAAS,CAAC,aAAD,CAAf;AACA,QAAMC,UAAU,CAAhB;AACA,QAAMC,WAAW,YAAjB;;AAEA,QAAIC,aAAa,IAAjB;AACA,QAAIC,QAAQ,IAAZ;AACA;AACI,qCAAe;AAAA;;AACX,kBAAM,IAAIC,KAAJ,CAAU,wDAAV,CAAN;AACH;;AAHL;AAAA;AAAA,4CAK2B;AACnB,uBAAO,IAAIC,OAAJ,CAAY,UAACC,OAAD,EAAUC,MAAV,EAAoB;AACnC,wBAAIC,cAAcC,OAAOC,SAAP,CAAiBC,IAAjB,CAAsBV,QAAtB,EAAgCD,OAAhC,CAAlB;;AAEAQ,gCAAYI,eAAZ,GAA8B,aAAK;AACjCd,0CAAkBe,aAAlB,CAAgCC,EAAEC,MAAF,CAASC,MAAzC;AACD,qBAFD;;AAIAR,gCAAYS,SAAZ,GAAwB,aAAK;AACzB,4BAAG,CAACf,UAAJ,EAAgB;AACZA,yCAAaY,EAAEC,MAAF,CAASC,MAAtB;AACAb,oCAAQD,WAAWC,KAAX,CAAiBe,IAAjB,CAAsBhB,UAAtB,CAAR;AACAA,uCAAWC,KAAX,GAAmB,YAAU;AACzB,sCAAM,IAAIC,KAAJ,CAAU,4CAAV,CAAN;AACH,6BAFD;AAGH;AACDE,gCAAQJ,UAAR;AACH,qBATD;;AAWAM,gCAAYW,OAAZ,GAAsB,aAAK;AACvBC,gCAAQC,GAAR,CAAYP,EAAEC,MAAF,CAASO,KAArB;AACAf,+BAAOO,EAAEC,MAAF,CAASO,KAAT,CAAeC,IAAtB;AACH,qBAHD;AAKH,iBAvBM,CAAP;AAwBH;AA9BL;AAAA;AAAA,0CAiCyBrB,UAjCzB,EAiCoC;AAC5BH,uBAAOyB,OAAP,CAAe,iBAAS;;AAEpB,wBAAGtB,WAAWuB,gBAAX,CAA4BC,QAA5B,CAAqCC,KAArC,CAAH,EAA+C;AAC3CzB,mCAAW0B,iBAAX,CAA6BD,KAA7B;AACH;AACDzB,+BAAW2B,iBAAX,CAA6BF,KAA7B,EAAoC,EAAEG,eAAe,IAAjB,EAApC;AACH,iBAND;AAOH;AAzCL;AAAA;AAAA,8CA2C6B;AACrB,oBAAG5B,UAAH,EAAc;AACVC;AACAD,iCAAa,IAAb;AACH;AACJ;AAhDL;;AAAA;AAAA;AAoDH,CA3DuB,EAAxB","file":"ConnectionFactory.js","sourcesContent":["var ConnectionFactory = (function () {  \r\n    const stores = ['negociacoes'];\r\n    const version = 4;\r\n    const database = 'aluraFrame';\r\n    \r\n    var connection = null;\r\n    var close = null;\r\n    return class ConnectionFactory {\r\n        constructor () {\r\n            throw new Error('Não é possível criar instâncias de \"ConnectionFactory\"')\r\n        }\r\n    \r\n        static getConnection (){\r\n            return new Promise((resolve, reject) =>{\r\n                let openRequest = window.indexedDB.open(database, version);\r\n    \r\n                openRequest.onupgradeneeded = e => {\r\n                  ConnectionFactory._createStores(e.target.result);\r\n                };\r\n    \r\n                openRequest.onsuccess = e => {\r\n                    if(!connection) {\r\n                        connection = e.target.result;\r\n                        close = connection.close.bind(connection);\r\n                        connection.close = function(){\r\n                            throw new Error('Você não pode fechar diretamente a conexão');\r\n                        }\r\n                    };\r\n                    resolve(connection);    \r\n                };\r\n    \r\n                openRequest.onerror = e => {\r\n                    console.log(e.target.error);\r\n                    reject(e.target.error.name);\r\n                };\r\n    \r\n            });\r\n        }\r\n    \r\n    \r\n        static _createStores(connection){\r\n            stores.forEach(store => {\r\n    \r\n                if(connection.objectStoreNames.contains(store)){\r\n                    connection.deleteObjectStore(store);\r\n                }\r\n                connection.createObjectStore(store, { autoIncrement: true});\r\n            })\r\n        }\r\n\r\n        static closeConnection() {\r\n            if(connection){\r\n                close();\r\n                connection = null;\r\n            }\r\n        }\r\n    }\r\n\r\n\r\n})();\r\n\r\n\r\n"]}